hashfunction H;
usertype String;

const XOR:Function;
const CON:Function;

macro HRi=H(Ri);
macro HSid=H(Sid);

macro FCLog=XOR(PreLogin,Rc1);
macro FCPass=XOR(PrePass,Rc2);
macro FCid=H(CON(FCLog,FCPass,Rc1,Rc2));

macro PreLoginPass=XOR(PreLogin,PrePass);
macro Rs1Rs2=XOR(Rs1,Rs2);
macro Rc1Rc2=XOR(Rc1,Rc2);
macro Login=XOR(PreLoginPass,Rs1Rs2);
macro Password=XOR(PreLoginPass,Rc1Rc2);
macro LoginPass=XOR(Login,Password);
macro HC=H(LoginPass);

macro LoginRid=XOR(Login,Rid);
macro IDinit=XOR(LoginRid,Password);
macro HIid=H(CON(Login,Password,Rid));

protocol setup (S, C) {
	role S{
	secret PreLogin, PrePass, Ri, Sid;
	fresh Rs1, Rs2;
	var Rc1, Rc2, Rid;

	recv_1(C, S, HRi);
	send_2(S, C,HSid);
	recv_3(C, S, FCLog, FCPass, FCid);
	send_4(S, C, HC);
	recv_5(C, S, IDinit, HIid);

	claim(S,Niagree);
	claim(S,Nisynch);
	claim(S,Alive);
	claim(S,Weakagree);
	}

	role C{
	secret PreLogin, PrePass, Ri, Sid;
	fresh Rc1, Rc2, Rid;
	var Rs1, Rs2;

	send_1(C, S, HRi);
	recv_2(S, C, HSid);
	send_3(C, S, FCLog, FCPass, FCid);
	recv_4(S, C, HC);
	send_5(C, S, IDinit, HIid);

	claim(C,Niagree);
	claim(C,Nisynch);
	claim(C,Alive);
	claim(C,Weakagree);
	}
}